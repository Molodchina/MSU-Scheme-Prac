3.I.

Форма let используется для локального связывания переменных с определенными значениями. Она позволяет создавать новые окружения, где связываются имена переменных и их значения, а затем выполняется тело выражения в этом окружении. После выполнения тело возвращает результат, а окружение удаляется.

В контексте вычислительной модели с окружениями (MBO) конструкция “let” служит для присваивания промежуточных значений во время вычислений и создаёт временные переменные или хранит результаты выражений для их повторного использования, что уменьшает повторение кода и улучшает эффективность.

Пример использования:

(let ((x 5)
      (y (+ 3 2)))
  (* x y))

 1. Определяется локальное окружение: x = 5, y = 5.
 2. Выражение (* x y) вычисляется в этом окружении. Результат - 25.

Диаграмма МВО:
 1. В глобальном окружении (Глобальное окружение) отсутствуют локальные переменные x и y.
 2. При выполнении let создается новое окружение, вложенное в глобальное (Окружение let), где переменные x и y получают свои значения.
 3. После выполнения тело (* x y) возвращает результат, а локальное окружение уничтожается.

Стрелочная диаграмма:

Глобальное окружение
┌─────────────┐
│ *           │
│ +           │
└─────────────┘
     ↑
Окружение let
┌─────────────┐
│ x → 5       │
│ y → 5       │
└─────────────┘
     ↑
Результат: 25

Пояснение:
 • Каждое окружение наследует ссылки на родительское.
 • После завершения работы let все временные переменные и окружение освобождаются.

3.2

Роль диаграмм классов:
Диаграммы классов используются при проектировании объектно-ориентированных программ. Они визуализируют структуру системы, описывая классы, их атрибуты, методы и взаимосвязи между ними. Это помогает разработчикам и аналитикам согласовать модель предметной области и логику программы.

Диаграмма описывает систему для обработки банковских операций. Основные элементы:
 1. Account:
 • Представляет финансовый счёт пользователя.
 • Атрибуты:
 • balance: Текущий баланс на счете.
 • limit: Максимально допустимый лимит кредита.
 • number: Номер счета.
 • Методы:
 • getBalance(): Получить текущий баланс.
 • setBalance(amount): Установить баланс.
 • getLimit(): Получить лимит кредита.
 • setLimit(limit): Установить лимит кредита.
 2. Card:
 • Представляет кредитную или дебетовую карту, связанную с аккаунтом.
 • Атрибуты:
 • cvv2Code: Код безопасности для проверки.
 • expirationDate: Дата окончания срока действия карты.
 • Методы:
 • getCVV2Code(): Получить код CVV.
 • setCVV2Code(code): Установить код CVV.
 • getExpirationDate(): Получить дату окончания действия карты.
 • setExpirationDate(date): Установить дату окончания действия карты.
 3. Transaction (Интерфейс):
 • Абстракция для финансовых транзакций.
 • Атрибуты:
 • amount: Сумма транзакции.
 • date: Дата транзакции.
 • number: Уникальный идентификатор транзакции.
 • Методы:
 • getAmount(): Получить сумму транзакции.
 • setAmount(amount): Установить сумму транзакции.
 • getDate(): Получить дату транзакции.
 • setDate(date): Установить дату транзакции.
 4. TransactionByCard:
 • Подкласс Transaction, который включает транзакции, связанные с картами.
 • Методы:
 • getCard(): Получить связанную карту.
 • setCard(card): Привязать карту к транзакции.
 5. CashTransaction:
 • Подкласс Transaction, который включает транзакции, связанные с наличными.
 • Атрибуты:
 • officeNumber: Номер офиса, который обрабатывает транзакцию.
 • paymaster: Лицо, которое авторизует транзакцию.
 • Методы:
 • getOfficeNumber(): Получить номер офиса.
 • setOfficeNumber(number): Установить номер офиса.
 • getPaymaster(): Получить имя распорядителя.
 • setPaymaster(name): Установить имя распорядителя.

Связи
 • Account и Card: Связь один ко многим (0..* ноль и более), так как один аккаунт может иметь несколько карт.
 • Account и Transaction: один аккаунт может участвовать в нескольких транзакциях (0..*).
 • TransactionByCard и Card: транзакция по карте связана с одной картой, но одна карта может участвовать в нескольких транзакциях (0..*).
 • TransactionByCard и CashTransaction наследуют атрибуты и методы Transaction.

Отличия элемента Transaction от других элементов
 • Transaction — это интерфейс, который предоставляет обобщенную структуру для всех типов транзакций, но не реализует конкретную логику.
 • TransactionByCard и CashTransaction — это конкретные реализации, которые добавляют специфические атрибуты (например, card или paymaster) и методы для своих контекстов.
